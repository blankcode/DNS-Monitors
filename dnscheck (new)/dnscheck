#!/bin/bash

# TODO: Fill-in
#           Name: (NAME (LONG_NAME))
#    Description: (WHAT DO I DO)
#             By: Brian Blankenship
#           Date:  2020-11-07 
#        Version: v1.0
#
#        Log Dir: (LOG_FILEPATH)
#       Log File: (LOG_FILENAME)
#
#           MUST: (REQUIREMENTS)
#         SHOULD: (ADVICE)
#
#           NOTE:

Report() {
  ##Alert to user at TTY
  [[ "$NOTTY" -ne "y" ]] && { echo -e "$(date) Bad!"; echo -e $($RESULTS); };

  ##Email alert
  [[ "$REPORT_ADDRESS" == "" ]] || { echo -e "From: dnsreport@proofpoint.com\nTo: $REPORT_ADDRESS\nSubject: Host not found $TARGET\nMissing $RETURN\n\n$RESULTS\n.\n" > /tmp/email.eml;sendmail -f$REPORT_ADDRESS $REPORT_ADDRESS < /tmp/email.eml; rm /tmp/email.eml; };

  ##Log Failure
  echo -e "$(date) Bad!" >> /tmp/dns_check_$SERVER.log; echo -e "Missing $RETURN" >> /tmp/dns_check_$SERVER.log; echo -e $($RESULTS) >> /tmp/dns_check_$SERVER.log; echo -e "\n" >> /tmp/dns_check_$SERVER.log;
};

Check() {
  #TTY Checking output
  [[ "$NOTTY" -ne "y"]] && { echo "$(date) Checking"; };
  echo "$(date) Checking" >> /tmp/dns_check_$SERVER.log;
  RESULTS=$(dig $TYPE $TARGET @$SERVER +trace);
  echo -e $GOOD_RECORD | while read A_RECORD;
    do
      GOOD="";
      GOOD=$(echo $RESULTS | grep $GOOD_RECORD);
      [[ "$GOOD" == "" ]] && Report;
    done;
};

##PLACEHOLDER FOR THIS FUNCTION
CheckRemote() {
  #TTY Checking output
  [[ "$NOTTY" -ne "y"]] && { echo "$(date) Checking @$REMOTESERVER"; };
  echo "$(date) Checking @$REMOTESERVER" >> /tmp/dns_check_$SERVER.log;
  RESULTS=$(dig $TYPE $TARGET @$REMOTESERVER +trace);
    for RETURN in $(echo -e $GOOD_RECORD);
      do
        GOOD="";
        GOOD=$(echo $RETURN | grep $GOOD_RECORD);
        [[ "$GOOD" == "" ]] && Report;
      done;
};

GoodRecord() {
##Records as individual statments for greps.
  GOOD_RECORD=$(dig $TYPE $TARGET @$SERVER +short | awk '{print $2}');
};

#Help
helps() {
  echo -e "To come";
};

## Arguments
OPTS=$(getopt -o hrsletidn --long "help,report,server,remote,target,type,daemonize,interval,notty" -- "$@")
eval set -- "$OPTS"
while true
  do
    case "$1" in
      -h | --help) helps; shift;;
      -r | --report) REPORT_ADDRESS=$2; shift 2;;
      -s | --server) SERVER=$2; shift 2;;
      -l | --remote) REMOTESERVER=$2; shift 2;;
      -e | --target) TARGET=$2; shift 2;;
      -t | --type) TYPE=$2; shift 2;;
      -i | --interval) INTERVAL=$2; shift 2;;
      -d | --daemonize) DAEMONIZE=y; shift;;
      -n | --notty) NOTTY=y; shift;;
      --) shift; break;;
    esac
done

##MAIN

rm /tmp/email.eml 2>/dev/null
[[ "$DAEMONIZE" == "y" ]] && {
  optstr=""
  [[ "$REPORT_ADDRESS" -ne "" ]] && optstr="--report $REPORT_ADDRESS $optstr"
  [[ "$SERVER" -ne "" ]] && optstr="--server @$SERVER $optstr"
  [[ "$TARGET" -ne "" ]] && optstr="--target @$TARGET $optstr"
  [[ "$TYPE" -ne "" ]] && optstr="--type $TYPE $optstr"
  [[ "$REMOTESERVER" -ne "" ]] && optstr="--remote @$REMOTESERVER $optstr"	
  [[ "$INTERVAL" -ne "" ]] && optstr="--interval $INTERVAL $optstr"
  nohup "./dns_check $optstr --notty" &
  echo -e "dns_check is daemonized on PID $(ps aux|grep dns_check|grep -v grep|awk {'print $2'})\n"
  exit 0; 
    } || { 
  GoodRecord;
  while true;
    do 
      Check
      [[ "$INTERVAL" == "" || "$INTERVAL" < "15" ]] && sleep 15 || sleep $INTERVAL
    done;
};

exit 0
